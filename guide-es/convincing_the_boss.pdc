% Felix's Node.js Convenciendo al jefe

Ahora qeu estás emocionado acerca de la idea de usar node.js, es tiempo de convencer a tu jefe.
Bueno, quizas. Tengo el placer de hacer [consultoría][consultoría] para diferentes negocios donde node.js es la tecnología correcta y a veces la respuesta es no.

Entonces esta guía es mi conjunto de consejos para aquellos para los que explorar node.js tenga sentido para sus negocios, y si es así, como convencer a sus gerentes.

[consultoría]: http://debuggable.com/

## Malos casos de uso

### Aplicaciones que hacen uso intensivo de CPU

Aunque amo node.js, hay muchos casos donde simplemente no tiene sentido. 
El caso más obvio son las aplicaciones que hacen un uso intensivo de CPU, y son livianas en I/O. 
Si estás planeando escribir software de encoding de video, inteligencia artificial o software de similar hambre de CPU, por favor no uses node.js. 
Si bien se pueden retorcer un poco las cosas, probablemente tengas mejores resultados con C o C++.

Una vez dicho esto, node.js permite escribir facilmente extensiones en C++, entonces es posible usarlo como un engine de scripting por sobre nuestros super-secretos algoritmos.

### Aplicaciones simples CRUD / HTML

Mientras node.js es eventualmente una herramienta divertida para escribir todo tipo de aplicaciones web, no deberias esperar que te provea más beneficios que PHP, Ruby o Python a este punto. 
Sí, tu aplicación puede que termine siendo un poquito más escalable, pero no - tu aplicación no va a tener magicamente más tráfico porque la escribiste en node.js.

La verdad es que mientras estamos empezando a ver buenos frameworks para node.js, no hay nada tan poderoso como Rails, CakePHP o Django en la escena todavía. 
Si la mayor parte de tu aplicación es simplemente mostrar HTML basado en alguna base de datos, usar node.js no te va a proveer muchos beneficios tangibles para tu negocio todavía.

### NoSQL + Node.js + Basura de palabra de moda

Si la arquitectura para tu próxima aplicación se lee como el libro de recetas de ingredientes NoSQL, por favor tomate un segundo y lee esto.

Sí, Redis, CouchDB, MongoDB, Riak, Casandra, etc. todos se ven realmente tentadores, pero hicieron que la manzana roja de Eva no pudiera resistirse. 
Si ya estás tomando un riesgo tecnológico usando node.js, no deberias multiplicarlo con más tecnología que probablemente todavía no entiendas completamente.

Seguro, hay legitimos casos de uso para elegir una base de datos orientada a documentos. 
Pero si estás tratando de crear un negocio sobre tu software, apegandote a tecnologías conservadoras de bases de datos (como postgres o mysql) podría superar los beneficios de satisfacer tu nerd interior e impresionar a tus amigos.

## Buenos casos de uso

### JSON APIs

Creando APIs REST / JSON ligeras es algo en lo que node.js realmente brilla. 
Su modelo non-blocking de I/O combinado con JavaScript hacen a una gran opción para envolver otras fuentes de información como bases de datos o web services y exponerlas via una interface JSON.

### Aplicaciones de una sola página

Si estás planeando escribir una aplicación de fuerte uso de AJAX de una sola página (pensá en gmail), node.js se ajusta perfectamente. La habilidad de procesar muchos requests / segundo con bajo tiempo de respuesta, así como compartiendo cosas como código de validación entre el servidor y el cliente, hace una gran opción para las aplicaciones web que hacen mucho procesamiento en el lado del cliente.

### Utilizando herramientas de linea de comando de unix

Siendo node.js todavía prematuro, es tentador reinventar todo tipo de software para él. 
Igualmente, un mejor modo de accionar es meterse en el vasto universo de las ya existentes lineas de comando. 
La habilidad de node de generar miles de "procesos hijos" y tratar sus outputs como streams, dejan como una opción ideal para quienes buscan usar software existente.

### Streaming de información

Web stacks tradicionales usualmente tratan a los requests http y a las respuestas como eventos atómicos. La verdad es que hay streams y muchas aplicaciones node.js que pueden tomar ventaja de este hecho. Un gran ejemplo es parsear la subida de archivos en tiempo real, así como crear proxies entre diferentes capas de información.

[realtimeencoding]: http://transloadit.com/blog/2010/12/realtime-encoding-over-150x-faster

### Aplicaciones Realtime

Otro gran aspecto de node.js es la elasticidad con la que podes desarrollar sistemas Realtime. 
Con esto me refiero a cosas como twitter, programas de chat, apuestas de deportes o interfaces de redes de mensajes instantaneos.

Pero por favor se cuidadoso en esto, desde que JavaScript es un lengiaje dinámico con colector de basura, tu tiempo de respuesta puede variar a veces dependiendo de cuan seguido y cuanto tarda en pasar el colector de basura (en que punto tu programa es parado). 
Entonces no trates de hacer sistemas duros realtime con node, que requieran tiempos de respuesta consistentes. 
Erlang es probablemente una mejor opción para ese tipo de aplicaciones.



## Convenciendo al jefe

Una vez que determinaste que tu uso de caso es bueno para usar node.js, es tiempo de convencer a tu jefe.

### Haciendo un prototipo

La mejor manera de "poner tu pie en la puerta" es sugerir tomarte una semana para hacer un prototipo simple de una parte de la aplicación que tenes en mente.
Es usualmente fácil que tu jefe concuerde con eso, ya que no tiene que comprometerse a largo plazo todavía.

Luego de tener la aprobación, es fácil tener un sistema básico corriendo, que te va a proveer de mucha más información y evidencia de los beneficios de node.js.

### Buscando desarrolladores

Pensá acerca de JavaScript como quieras, pero a este punto se está volviendo la lengua franca de la programación. Practicamente toda computadora personal tiene uno o más interpretes (navegadores) instalados, lo que hace casi imposible por la mayoría de los desarrolladores web no aprenderlo en algún punto de su carrera.

Esto signfica que tenes un enorme y diverso grupo de personas que podes contratar, y probablemente ya haya muchos talentosos en tu compañia. Entonces, si estás trabajando para una compañia en crecimiento, este es un argumento fuerte en favor de node.js.

[lingua franca]: http://en.wikipedia.org/wiki/Lingua_franca

### Comunidad vibrante

Llegado este punto la comunidad de node.js está creciendo a un ritmo loco, atrayendo algunos de los desarrolladores más inteligentes de la industria. Esto también significa que el ecosistema de node crece cada día, y también es facil encontrar soporte gratuito y comercial de distintas fuentes.

### Performance

Este argumento tiene que ser expuesto con cautela, pero si la performance es un aspecto crítico de tu aplicación, node.js tiene mucho que ofrecer. 
Con cinco compañias (mozilla, Google, Apple, microsoft, Opera) compitiendo sobre la mejor implementación de JavaScript, el intérprete de JavaScript por debajo de node (Google v8) se fue haciendo muy rápido y mejor cada día.

Combinando esto con el modelo radical de node de non-blocking I/O, tenes que tratar mucho para crear una aplicación lenta. 
La mayoría de las aplicaciones en node son capaces de manejar miles de conexiones concurrentes, en lo que puede ser considerado hardware moderado para cualquier estándar.

### Apoyo corporativo

Uno de los riesfos de usar un joven proyecto open source es la falta de compromiso a largo plazo de sus autores. 
Este no es el caso de node.js. Node es actualmente esponsoreado por Joyent, que contrató a Ryan Dahl y muchos otros colaboradores princpiales, con lo cual hay un apoyo económico real al fúturo del desarrollo del proyecto.

Entre otras cosas, esto ya le dio a compañias como Yahoo! y HP suficiente confianza para crear su próxima generación de productos en node.js, así que tu jefe puede relajarse leyendo ess tranquilizantes testimonios.

[joyent]: http://joyent.com/

## Convenciendo al cliente

Si sos un freelancer o una compañia pequeña haciendo contratos de trabajo, convencer al cliente de usar node.js puede ser otra historia.

Después de todo ellos son generalmente muy dependientes de tu jucio, así como son en el continuo soporte por el software que creas para ellos.

Mi consejo acá es que seas un poco más conservador, y chequees doblemente si node se ajusta a tu caso. 
Si es así, mantenete seguro de que tenes los recursos y el tiempo para dar soporte a tu aplicación en el futuro. 
El equipo de node.js está sacando nuevas versiones muy velozmente, así que deberías esperar un poco de trabajo cada 3-6 meses para actualizar a la última versíon.
