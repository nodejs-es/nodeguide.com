% Felix's Node.js Convenciendo al jefe

Now that you're all hyped up about using node.js, it's time to convince your
boss. Well, maybe. I have had the pleasure of [consulting][consulting] for
different businesses on whether node.js is the right technology, and sometimes
the answer is simply no.

So this guide is my opinionated collection of advice for those of you that want
to explore whether node.js makes sense for their business, and if so, how to 
convince the management.

[consulting]: http://debuggable.com/

## Malos casos de uso

### Aplicaciones que hacen uso intensivo de CPU

Aunque amo node.js, hay muchos casos donde simplemente no tiene sentido. 
El caso más obvio son las aplicaciones que hacen un uso intensivo de CPU, y son livianas en I/O. 
Si estás planeando escribir software de encoding de video, inteligencia artificial o software de similar hambre de CPU, por favor no uses node.js. 
Si bien se pueden retorcer un poco las cosas, probablemente tengas mejores resultados con C o C++.

Una vez dicho esto, node.js permite escribir facilmente extensiones en C++, entonces es posible usarlo como un engine de scripting por sobre nuestros super-secretos algoritmos.

### Aplicaciones simples CRUD / HTML

Mientras node.js es eventualmente una herramienta divertida para escribir todo tipo de aplicaciones web, no deberias esperar que te provea más beneficios que PHP, Ruby o Python a este punto. 
Sí, tu aplicación puede que termine siendo un poquito más escalable, pero no - tu aplicación no va a tener magicamente más tráfico porque la escribiste en node.js.

La verdad es que mientras estamos empezando a ver buenos frameworks para node.js, no hay nada tan poderoso como Rails, CakePHP o Django en la escena todavía. 
Si la mayor parte de tu aplicación es simplemente mostrar HTML basado en alguna base de datos, usar node.js no te va a proveer muchos beneficios tangibles para tu negocio todavía.

### NoSQL + Node.js + Basura de palabra de moda

Si la arquitectura para tu próxima aplicación se lee como el libro de recetas de ingredientes NoSQL, por favor tomate un segundo y lee esto.

Sí, Redis, CouchDB, MongoDB, Riak, Casandra, etc. todos se ven realmente tentadores, pero hicieron que la manzana roja de Eva no pudiera resistirse. 
Si ya estás tomando un riesgo tecnológico usando node.js, no deberias multiplicarlo con más tecnología que probablemente todavía no entiendas completamente.

Seguro, hay legitimos casos de uso para elegir una base de datos orientada a documentos. 
Pero si estás tratando de crear un negocio sobre tu software, apegandote a tecnologías conservadoras de bases de datos (como postgres o mysql) podría superar los beneficios de satisfacer tu nerd interior e impresionar a tus amigos.

## Buenos casos de uso

### JSON APIs

Creando APIs REST / JSON ligeras es algo en lo que node.js realmente brilla. 
Su modelo non-blocking de I/O combinado con JavaScript hacen a una gran opción para envolver otras fuentes de información como bases de datos o web services y exponerlas via una interface JSON.

### Aplicaciones de una sola página

Si estás planeando escribir una aplicación de fuerte uso de AJAX de una sola página (pensá en gmail), node.js se ajusta perfectamente. La habilidad de procesar muchos requests / segundo con bajo tiempo de respuesta, así como compartiendo cosas como código de validación entre el servidor y el cliente, hace una gran opción para las aplicaciones web que hacen mucho procesamiento en el lado del cliente.

### Shelling out to unix tools

With node.js still being young, it's tempting to re-invent all kinds of software
for it. However, an even better approach is tapping into the vast universe of
existing command line tools. Node's ability to spawn thousands of child
processes and treating their outputs as a stream makes it an ideal choice for
those seeking to leverage existing software.

### Streaming data

Traditional web stacks often treat http requests and responses as atomic events.
However, the truth is that they are streams, and many cool node.js applications
can be built to take advantage of this fact. One great example is parsing [file
uploads in real time][realtimeencoding], as well as building proxies between different data
layers.

[realtimeencoding]: http://transloadit.com/blog/2010/12/realtime-encoding-over-150x-faster

### Soft Realtime Applications

Another great aspect of node.js is the ease at which you can develop soft real
time systems. By that I mean stuff like twitter, chat software, sport bets or
interfaces to instant messaging networks.

But please be careful here, since JavaScript is a dynamic / garbage collected
language, your response times may sometimes vary depending on how often and long
the garbage collection kicks in (at which point your program is stopped). So
don't try to build hard realtime systems in node, that require consistent
response times. Erlang is probably a better choice for these kinds of
applications.

## Convincing the boss

Once you have determined that your use case is a good fit for node.js, it's time
to convince your boss or management of giving it a go.

### Building a prototype

The best way to put your foot into the door, is to suggest taking a week to
build a simple prototype of a certain part of the application you have in mind.
It's usually easy to get management to agree to that, since they don't have to
make a long term commitment yet.

After you've got the approval, it's usually easy to get a basic system up and
running, which will provide you with much more hard data and evidence of the
benefits of node.js.

### Finding developers

Think of JavaScript whatever you want, but at this point it's becoming the
[lingua franca][] of computer programming. Pretty much every personal computer
has one or more JavaScript interpreters (browsers) installed, which means it's
almost impossible for most web developers to not learn it at some point in their
career.

This means that you get a huge and diverse pool of people you can hire, and you
probably already have plenty of talent in your own company. So if you're working
for a growing company, this is a strong argument favouring node.js.

[lingua franca]: http://en.wikipedia.org/wiki/Lingua_franca

### Vibrant community

At this point the node.js community is growing at an insane pace, attracting
some of the smartest developers in the industry. This also means that the node
ecosystem is growing every day, and it's also easy to get free and commercial
support from various sources.

### Performance

This argument has to be carefully played, but if performance is a critical
aspect of your application, node.js has lots to offer. With five companies
(Mozilla, Google, Apple, Microsoft, Opera) competing over the best JavaScript
implementation, node's underlaying interpreter (Google's v8) has become insanely
fast, and getting better every day.

Combining this with node's radical model of non-blocking I/O, you have to try
very hard to create a sluggish application. Most node apps are easily capable of
handling thousands of concurrent connections, on what could be considered
moderate hardware by any standards.

### Corporate Backing

One of the risks with using a young open source project is the lack of longterm
commitment by its authors. This isn't the case with node.js. Node is currently
sponsored by [Joyent][], who has hired Ryan Dahl and several other core
contributors, so there is a real economic force backing the future development
of the project.

Amongst other things, this has already given companies like Yahoo! and HP
(formerly Palm) enough confidence to build their next generation products on
node.js, so your boss can certainly relax by reading their reassuring
testimonials.

[joyent]: http://joyent.com/

## Convincing a client

If you're a freelancer or small company doing contract work, convincing a client
to use node.js might be a different story. After all they are usually very
dependent on your judgement, as well as continuous support for the software you
create for them.

My advice here is to be a little more conservative, and double check if node is
a good fit. If it is, make sure that you have the resources and time to support
the application in the future. The node.js team is releasing new versions at a
rapid pace, and so you should expect a little work every 3-6 months to update to
the latest version.

